# Node Read Eval Print Loop (REPL)
- is a computer environment where user inputs are read and evaluated, and then the results are returned to the user.

# Working Directory (git add)
- the directory where we initialized git, then we can push our files to a Staging Area.

# Staging Area (git commit)
- where we can pick and choose which files we want to commit. then we can commit our files or our save point to our Local Repository.

# Local Repository
- once you've done a few commits, then you actually have a timeline/log of various commits and this is called a Main Branch. 

# Main Branch
- your main branch of commits or save points, and it is sequential, and this is usually where your main progress is saved or commited. Later on, we then introduced this idea of Remote Repository.

# Remote Repository (git push)
- the important thing to note is that you can have a local repository completely in parallel with a remote repository check the differences between them, but you can also sync them or push things from your local repository to your remote repository. the local repository is the git file that we've got inside our Working Directory, and the remote repository is GitHub, which hosts our code and also hosts all of the changes that were made in between the different commits. and when we performed the command "git push", then that effectively pushed all of those commits, all of those various versions and changes, and code pieces to our remote repository on GitHub.

# Unstage Commits in Staging Area
- I'm going to basically undo what I've just done.
So I'm going to remove all of these files from my Staging area and then I'm going to add them later 
on once I've got my gitignore setup.
Basically, we're just undoing the last step.
To do that, I'm going to write "git rm --cached" and I'm going to use the "-r" flag for recursive
and I'm going to use a "." (dot) to say that everything inside the current directory should be removed from
the Staging area.

# .gitignore (ignore certain file/folder to uploaded in Remote Repository)
- Now with gitignore it has certain rules.
So for example you can use the pound sign (#) to comment.
So for example, you can say, you know, "#Log files," right? "To be ignored" .
Another thing you can do is use wildcards.
So if you use the asterisks (*) and you say *.txt, that means that when you commit your
project, all of the files that have a .txt extension will be ignored.
- https://github.com/github/gitignore A collection of useful .gitignore templates

# Cloning Repository (git clone url)
- cloning a remote repository on GitHub to pull it onto your local repository on your machine.
And this is a way for you to pull down all of the versions and all of the commits of a particular remote
repository and to store the files in your own working directory. 
So once you've cloned a repo, you've essentially made a copy of it on your own local working environment
and allows you to stand on the shoulders of giants and continue where they left off. So you won't need
to clone it again during regular development.

# Pull (git pull)
- get last updated code to your local repository if someone make a changing and push to your remote reopository.

# Branching (git branch name-of-branch)
- we want to try out something different maybe build a new feature or just to mess around with a new idea or concept
we can also create a side branch. 
- git branch to check all branch we haved
- git checkout name-of-branch to switch our branch

# Merging (git merge name-of-branch)
- if some point in the future that we decide that experiment is really fruitfull and great ad we'd like to merge it 
back to the main branch that can be done simply placing a merge request. 

# Optional Git Challenge : https://learngitbranching.js.org/ 

# Forking
- we're basically just copying a repository that's hosted on GitHub and we're keeping
the copy under our own GitHub account where we can make changes to it.

# Pull Request
- if someone decides to add some features to it, maybe, you know, improve the code base or add some
more code or do something crazy or whatever it is that they want, then committed those changes, 
then push it to their remote repository.
And then if they want me to incorporate those changes that they made, then their only option
is to make a "Pull request". And it's almost like making a suggestion.